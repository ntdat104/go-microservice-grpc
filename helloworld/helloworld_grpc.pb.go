// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HelloworldServiceClient is the client API for HelloworldService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HelloworldServiceClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	SayHelloServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloworldService_SayHelloServerStreamClient, error)
	SayHelloClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloworldService_SayHelloClientStreamClient, error)
	SayHelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (HelloworldService_SayHelloBidirectionalStreamClient, error)
}

type helloworldServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloworldServiceClient(cc grpc.ClientConnInterface) HelloworldServiceClient {
	return &helloworldServiceClient{cc}
}

func (c *helloworldServiceClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/go_microservice_grpc.HelloworldService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloworldServiceClient) SayHelloServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (HelloworldService_SayHelloServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloworldService_ServiceDesc.Streams[0], "/go_microservice_grpc.HelloworldService/SayHelloServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloworldServiceSayHelloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloworldService_SayHelloServerStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloworldServiceSayHelloServerStreamClient struct {
	grpc.ClientStream
}

func (x *helloworldServiceSayHelloServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloworldServiceClient) SayHelloClientStream(ctx context.Context, opts ...grpc.CallOption) (HelloworldService_SayHelloClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloworldService_ServiceDesc.Streams[1], "/go_microservice_grpc.HelloworldService/SayHelloClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloworldServiceSayHelloClientStreamClient{stream}
	return x, nil
}

type HelloworldService_SayHelloClientStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloworldServiceSayHelloClientStreamClient struct {
	grpc.ClientStream
}

func (x *helloworldServiceSayHelloClientStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloworldServiceSayHelloClientStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloworldServiceClient) SayHelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (HelloworldService_SayHelloBidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &HelloworldService_ServiceDesc.Streams[2], "/go_microservice_grpc.HelloworldService/SayHelloBidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloworldServiceSayHelloBidirectionalStreamClient{stream}
	return x, nil
}

type HelloworldService_SayHelloBidirectionalStreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type helloworldServiceSayHelloBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *helloworldServiceSayHelloBidirectionalStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloworldServiceSayHelloBidirectionalStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloworldServiceServer is the server API for HelloworldService service.
// All implementations must embed UnimplementedHelloworldServiceServer
// for forward compatibility
type HelloworldServiceServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	SayHelloServerStream(*HelloRequest, HelloworldService_SayHelloServerStreamServer) error
	SayHelloClientStream(HelloworldService_SayHelloClientStreamServer) error
	SayHelloBidirectionalStream(HelloworldService_SayHelloBidirectionalStreamServer) error
	mustEmbedUnimplementedHelloworldServiceServer()
}

// UnimplementedHelloworldServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHelloworldServiceServer struct {
}

func (UnimplementedHelloworldServiceServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedHelloworldServiceServer) SayHelloServerStream(*HelloRequest, HelloworldService_SayHelloServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStream not implemented")
}
func (UnimplementedHelloworldServiceServer) SayHelloClientStream(HelloworldService_SayHelloClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStream not implemented")
}
func (UnimplementedHelloworldServiceServer) SayHelloBidirectionalStream(HelloworldService_SayHelloBidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStream not implemented")
}
func (UnimplementedHelloworldServiceServer) mustEmbedUnimplementedHelloworldServiceServer() {}

// UnsafeHelloworldServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HelloworldServiceServer will
// result in compilation errors.
type UnsafeHelloworldServiceServer interface {
	mustEmbedUnimplementedHelloworldServiceServer()
}

func RegisterHelloworldServiceServer(s grpc.ServiceRegistrar, srv HelloworldServiceServer) {
	s.RegisterService(&HelloworldService_ServiceDesc, srv)
}

func _HelloworldService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloworldServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_microservice_grpc.HelloworldService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloworldServiceServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HelloworldService_SayHelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloworldServiceServer).SayHelloServerStream(m, &helloworldServiceSayHelloServerStreamServer{stream})
}

type HelloworldService_SayHelloServerStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type helloworldServiceSayHelloServerStreamServer struct {
	grpc.ServerStream
}

func (x *helloworldServiceSayHelloServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloworldService_SayHelloClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloworldServiceServer).SayHelloClientStream(&helloworldServiceSayHelloClientStreamServer{stream})
}

type HelloworldService_SayHelloClientStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloworldServiceSayHelloClientStreamServer struct {
	grpc.ServerStream
}

func (x *helloworldServiceSayHelloClientStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloworldServiceSayHelloClientStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloworldService_SayHelloBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloworldServiceServer).SayHelloBidirectionalStream(&helloworldServiceSayHelloBidirectionalStreamServer{stream})
}

type HelloworldService_SayHelloBidirectionalStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type helloworldServiceSayHelloBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *helloworldServiceSayHelloBidirectionalStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloworldServiceSayHelloBidirectionalStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloworldService_ServiceDesc is the grpc.ServiceDesc for HelloworldService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HelloworldService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_microservice_grpc.HelloworldService",
	HandlerType: (*HelloworldServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _HelloworldService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloServerStream",
			Handler:       _HelloworldService_SayHelloServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloClientStream",
			Handler:       _HelloworldService_SayHelloClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloBidirectionalStream",
			Handler:       _HelloworldService_SayHelloBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/helloworld.proto",
}
